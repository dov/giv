Import('env')

def CheckPKG(context, name):
     context.Message( 'Checking for %s... ' % name )
     ret = context.TryAction('${PKGCONFIG} --exists \'%s\'' % name)[0]
     context.Result( ret )
     return ret
 
libs=['giv-widget','gtkimageviewer_local','aggx','plis','pcrex']
for p in [#'pgm.c',
          'npy.c',
#          'simple_dicom.c'
          ]:
    env.SharedLibrary(p,
                      LIBPATH=['..','../gtkimageviewer','../agg','../pcre','../plis']+env['LIBPATH'],
                      LIBS = ['giv-image']+env['LIBS']
                      )

# Change this to Maemo
if not env['SBOX']:
    # Prefer system fits library if it exists
    conf = Configure(env,
                     custom_tests = { 'CheckPKG' : CheckPKG } )

    if True or conf.CheckLib('cfitsio'):
        print("Using system cfitsio library")
        env.ParseConfig('${PKGCONFIG} --cflags --libs cfitsio')

        env.SharedLibrary('fits',
                      ['fits.c'],
                      LIBPATH=['..','../gtkimageviewer','../agg','../pcre','../plis']+env['LIBPATH'],
                      LIBS=['giv-image']+env['LIBS'],
                      CPPPATH= env['CPPPATH']
                      )
    else:
        print('No cfitsio found')

    use_system_dcmtk = conf.CheckCXXHeader('dcmtk/ofstd/ofstd.h')
    print('use_system_dcmtk=',use_system_dcmtk)
    dcmtk_path = []
    dcmtk_libpath = []

    if not use_system_dcmtk:
         dcmtk_path = ['dcmtk/dcmdata/include',
                       'dcmtk/ofstd/include',
                       'dcmtk/config/include']
         dcmtk_libpath = ['#/src/plugins/dcmtk/${ARCHDIR}/${VARIANT}']

    if not ARGUMENTS.get('nodicom', 0):
        env_copy = env.Clone()
        env_copy.ParseConfig('${PKGCONFIG} --cflags --libs dcmtk plis')
        env_copy.Append(CPPFLAGS=env['CPPFLAGS'] + ['..'],
                        LIBPATH=env['LIBPATH']+['..'],
                        LIBS=env['LIBS'] + ['giv-image']),
        plugin_dicom = env_copy.SharedLibrary('dicom',
                          ['dicom.cc'])
    else:
         plugin_dicom = None

    env.SharedLibrary('tiff',
                      ['tiff.c'],
                      LIBPATH=['..','../gtkimageviewer','../agg','../pcre','../plis'] + env['LIBPATH'],
                      LIBS=['libtiff','giv-image']+env['LIBS'],
                      )
    env.SharedLibrary('png',
                      ['png.c'],
                      LIBPATH=['..','../gtkimageviewer','../agg','../pcre','../plis'] + env['LIBPATH'],
                      LIBS=['png','z','giv-image']+env['LIBS'],
                      )
    env.SharedLibrary('ora',
                      ['ora.cc'],
                      LIBPATH=['..','../gtkimageviewer','../agg','../pcre','../plis'] + env['LIBPATH'],
                      LIBS=['png','libzip', 'z','giv-image']+env['LIBS'],
                      )
    env.SharedLibrary('webp',
                      ['webp.cc'],
                      LIBPATH=['..','../gtkimageviewer','../agg','../pcre','../plis'] + env['LIBPATH'],
                      LIBS=['webp','giv-image']+env['LIBS'],
                      )

    if plugin_dicom is not None and not use_system_dcmtk:
        env.Depends(plugin_dicom,
                    ['#/src/plugins/dcmtk/${ARCHDIR}/${VARIANT}/libdcmdata.a',
                     '#/src/plugins/dcmtk/${ARCHDIR}/${VARIANT}/libofstd.a'])

        SConscript(['dcmtk/SConscript'],
                   exports='env')
