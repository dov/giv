<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML//EN">
<!-- process with eperl (from http://marginalhacks.com/Hacks/ePerl/) to produce html file> -->
<html>
<head>
<title>GIV user manual</title>
</head>
<:

BEGIN {
    $sec=0;
    $subsec=0;
    open(TOC, "perl-toc.html");
    $toc = join("", <TOC>);
    open(TOC, ">perl-toc.html");
    print TOC "<ul>\n";
}

END {
    print TOC "</ul>\n";
    close(TOC);
}

sub html_quote {
    my $html = shift;
    $html=~ s/&/&amp;/g;
    $html=~ s/</&lt;/g;
    $html=~ s/>/&gt;/g;
    return $html;
}

sub warning {
    my $text = shift;
    print
        "<center>\n"
       ."  <table border width=75%>\n"
       ."    <tr><td bgcolor=yellow><font color=#800040><h2 align=center>Note!</h3></font><font color=#800000 size=+1>$text</font>"
       ."  </table>\n"
       ."</center>\n";
}

sub section {
   $sec++;
   $subsec=0;
   print "<h2><a name=\"SEC$sec\">$sec. @_</a></h2>\n";
   print TOC "<li> <a href=\"#SEC$sec\">$sec. @_</a></li>\n";
}

sub subsection {
   $subsec++;
   print "<h3><a name=\"SEC$sec.$subsec\">$sec.$subsec. @_</a></h3>\n";
   print TOC "<li> <a href=\"#SEC$sec.$subsec\">$sec.$subsec. @_</a></li>\n";
}

sub mycomment {
   print "<i><font color=\"#8B5A00\">@_</font></i><p>";
}

sub dtb { print "<dt><b>@_</b>" }

sub code_snippet {   # usage: code_snippet($filename, title)
   my $filename = shift;
   my $title = shift || "$filename";
   my $snippet = shift;
   my $lineno = 0;
   my $par;
   $par = "<table border>" .
           "<tr><th bgcolor=#E0E0FF><a href=\"$filename\">$title</a>" .
	   "<tr><td bgcolor=#FFE0E0><pre>";
   open(IN, $filename);
   while(<IN>) {
       chomp;
       $_ = html_quote($_);
       $lineno++;
       my $pref = "     ";
       $pref = sprintf("%3d: ", $lineno);
       $par.= "<font size=-1 color=red>$pref </font>$_ \n";
   }
   close(IN);
   chop($par);
   $par.= "</pre></table>";
   print $par;
}
:>

<body bgcolor=white>
<h1 align=center>A Manual for Giv<br></h1>
<center>
  <font size=+2>The</font>
  <font size=+4 color=#000080>G</font><font size=+2>(reat|tk|NU)</font>
  <font size=+4 color=#000080>I</font><font size=+2>mage and</font>
  <font size=+4 color=#000080>V</font><font size=+2>ector viewer</font><br>
  </font>
</center>
<h2 align=center>
    <img src="giv-logo-150.png"><br>
    <font size=+2>Version 0.9.37</font><br>
    <font size=-1>Dov Grobgeld</font><br>
    <font size=-1>Homepage: <a href="http://giv.sourceforge.net/giv">http://giv.sourceforge.net/giv</a></font><br>
    <font size=-1>Development: <a href="http://github.com/dov/giv">http://github.com/dov/giv</a></font><br>
    <font size=-1>Chat room: <a href="https://gitter.im/dov/giv?utm_source=share-link&utm_medium=link&utm_campaign=share-link">Gitter Giv Chat room</a></font><br>
    <font size=-1><a href="mailto:dov.grobgeld@gmail.com">dov.grobgeld@gmail.com</a></font><br>
    <font size=-1>Last modified: 2023-02-09 Thu</font>
</h2>

<: section("Description") :>
<blockquote>
  giv is an image viewer with the following features:
  <UL>
    <LI> Based on the gtk_image_viewer gtk widget (included), which
      provides small-memory and zoomable view of images.</LI>
    <li>Support for 8-bit, 16-bit, 32-bit, and floating point gray and color images.
    <li>Plugin support for external loaders.
    <li>Support for multi-slice images. E.g. fits
    <li>Includes plugins for reading the npy-format, FITS-format, and DICOM.
    <li>An interactive contrast tool  allows interactively changing
  contrast and brightness.
    <LI> It can display lines and marks on top of an image with sub
      pixel accuracy. </LI>
    <li>Very fast overlay rendering through the free software library agg,
      which allows for easily showing hundreds of thousands of overlay points.</li>
    <li> Balloon popups can be tied to any overlay and is shown when the 
    mouse hovers above that overlay.</li>
    <LI> Pseudo coloring of gray level images.</LI>
    <LI> It is especially suited for computational geometry and vision
      scientific and educational applications.</LI>
    <LI> Hierarchical layering of data sets that can be turned on and off.</LI>
    <LI> Measuring distance in image through a caliper tool. </LI>
    <li> Export and print to png, svg, postscript, and pdf thanks to cairo.
    <LI> Cross platform on posix and Windows through gtk-3. </LI>
  </UL>
</blockquote>

<: subsection("Images") :>
<blockquote>
  Images are loaded through gdk_pixbuf and through additional image loaders. The image may be scrolled and zoomed with the mouse or the keyboard.
  <p>
    Here is an example of the image display:
  <table>
    <tr><td><img src="giv-maja.jpg">
	<td><img src="giv-zoom-in.jpg">
    </tr>
    <tr><th>Normal scale
	  <th>Zoom in
    </tr>
  </table>
    
</blockquote>

<: subsection("The giv files") :>
<blockquote>
  giv has the cabability to read files describing vector annotations that
  are drawn on top of the image, or make up a drawing on their own.
  The annotations are loaded in file known as giv files.
  The giv files contains one or more data sets. A data set consists of
  properties, followed by a list of data points.
  <p>
    A few of the properties are global and they effect not only
    the dataset but the entire display, e.g. the <tt>$image</tt>, and the <tt>$vflip</tt>.
  <p>
  The properties all start with the $ sign. Here is a list of all
  the properties supported:<p>
  <: $row_idx=0;
     sub td {
        my @colors = ("#ffeeee", "#fbf2ee");
        print "<td bgcolor=" . $colors[$row_idx % 2] . " valign=top>";
     }
     sub TR {
        print "<tr>";
        $row_idx++;
     }
   :>
  <table>
    <: TR() :><th bgcolor=#eeeeff>Property
	<th bgcolor=#eeeeff>Example
	<th bgcolor=#eeeeff>Description
    <:TR():><: td() :>$color
        <: td() :>$color pink3.
	<: td() :>The color of the data set (See color section below). If the color has a trailing "/<i>num</i>" then it is considered to be the alpha transperancy of the color. 
    <:TR():><: td() :>$outline_color
        <: td() :>$color green
	<: td() :>The outline color of a polygon
    <:TR():><: td() :>$noline
        <: td() :>$noline
	<: td() :>Indicates that the no lines should be drawn for the data set.
    <:TR():><: td() :>$line
        <: td() :>$line
	<: td() :>Lines should be drawn for the data set (default).
    <:TR():><: td() :>$marks
        <: td() :>$marks circle
	<: td() :>The type of the mark. Valid marks are:
	    <ul>
	      <li>circle
	      <li>fcircle
	      <li>square
	      <li>fsquare
	    </ul>
    <:TR():><: td() :>$svgmarks
        <: td() :>$svgmarks drop.svg
	<: td() :>Reference an external svg file as a marker.
    <:TR():><: td() :>$hide
        <: td() :>$hide
	<: td() :>Initially hide the dataset. It may be turned on by the marks viewer.
	  
    <:TR():><: td() :>$scale_marks
        <: td() :>$scale_marks
	<: td() :>Indicates whether the marks should be scaled together with the image. Default is not to scale.

    <:TR():><: td() :>$linedash
        <: td() :>$linedash 10 5
        <: td() :>Specifies that lines should be drawn with dashes. The numbers indicate the dash and the spacing size. There may be multiple pairs, indicating sequential shapes.

    <:TR():><: td() :>$mark_size
        <: td() :>$mark_size 15
        <: td() :>Specify the size of the marks in pixels.

    <:TR():><: td() :>$lw
        <: td() :>$lw 3
        <: td() :>Line width. This also affects the width of the outline marks (e.g. circle and square).
    <:TR():><: td() :>$image
        <: td() :>$image maja.pgm
        <: td() :>Reference image to be shown below the image. Several images lines may be given. The user may rotate between the different images through the shift-Up and shift-down key bindings.
    <:TR():><: td() :>$arrow
        <: td() :>$arrow start
        <: td() :>Indicate that arrows should be added to the lines. Arrows may be drawn at the start, of the line, the end of the line, or both by giving the keywords "start", "end", "both" after $arrow.
    <:TR():><: td() :>$font
        <: td() :>$font Monospace 24
        <: td() :>Font to be used for drawing text. The name of the font
          is according to requirements of pango font string representation.
    <:TR():><: td() :>$text_style
        <: td() :>$text_style shadow
        <: td() :>The style used to draw the text. The only valid style is "shadow".
    <:TR():><: td() :>$shadow_color
        <: td() :>$shadow_color black/0.3
        <: td() :>For the shadow style, the color of shadows.
    <:TR():><: td() :>$shadow_offset
        <: td() :>$shadow_offset 1 1
        <: td() :>For the shadow style, the x and y offsets of the shadow.
    <:TR():><: td() :>$pango_markup
        <: td() :>$pango_markup
        <: td() :>Indicates that the text should be interpreted as a pango markup string. See: http://developer.gnome.org/pango/stable/PangoMarkupFormat.html
    <:TR():><: td() :>$scale_font
        <: td() :>$scale_font 1
        <: td() :>Indicates that the text should be scaled with the current zoom level. Default is not to zoom up text.
    <:TR():><: td() :>$balloon
        <: td() :>$balloon Suspect
        <: td() :>Adds another line to the popup balloon that is shown
          when the balloon popups have been turned on (in the view menu)
          and the mouse hovers over the dataset. 
    <:TR():><: td() :>$polygon
        <: td() :>$polygon
        <: td() :>Indicates that the dataset should be filled.
    <:TR():><: td() :>$def_style
        <: td() :>$def_style Ref $color green
        <: td() :>Add an additional property to a style. (See style section)
    <:TR():><: td() :>$style
        <: td() :>$style Ref
        <: td() :>Imports all dataset properties from the namedo style. This is simply a shortcut to explicitely writing all style properties.
    <:TR():><: td() :>$path
        <: td() :>$path reference/pads
        <: td() :>Creates a hierarchical name of the dataset that will be used in the dataset browser. Each slash indicates another branch in the hierarchy tree.
    <:TR():><: td() :>$quiver_color
        <: td() :>$quiver_color green
	<: td() :>The color of a quiver arrow
    <:TR():><: td() :>$quiver_scale
        <: td() :>$quiver_scale 100
	<: td() :>The original scale of the quiver plot
    <:TR():><: td() :>$vflip
        <: td() :>$vflip
	<: td() :>Flip the vertical axis of the marks and images.
    <:TR():><: td() :>$novflip
        <: td() :>$novflip
	<: td() :>Turn off the vertical flip.
    <:TR():><: td() :>$hflip
        <: td() :>$hflip
	<: td() :>Flip the horizontal axis of the marks and images.
    <:TR():><: td() :>$nohflip
        <: td() :>$nohflip
	<: td() :>Turn off the horizontal flip.
    <:TR():><: td() :>$vlock
        <: td() :>$vlock
	<: td() :>Lock the vertical axis zoom. Useful e.g. for exploring time plots.
    <:TR():><: td() :>$title
        <: td() :>$title
	<: td() :>Set the window title.
    <:TR():><: td() :>$pixelsize
        <: td() :>$pixelsize 5 µm
	<: td() :>Set the pixelsize for the measurement tool
  </table>
  
</blockquote>

<: subsection("Lines and Bezier Curves") :>
<blockquote>
After the header of the dataset, follows its data points.

giv follows the SVG model of drawing curves. A line is composed of a letter followed by the coordinates. By default the action is lineto, but the following are also supported:

<table>
    <: TR() :><th bgcolor=#eeeeff>Letter
	<th bgcolor=#eeeeff>Meaning
	<th bgcolor=#eeeeff>Number parameters
	<th bgcolor=#eeeeff>Comment
    <:TR():><: td() :>M
        <: td() :>move to 
	<: td() :>2
	<: td() :>Implicit for first point
    <:TR():><: td() :>L
        <: td() :>line to
	<: td() :>2
	<: td() :>Optional
    <:TR():><: td() :>Z
        <: td() :>line to
	<: td() :>2
	<: td() :>Close path
    <:TR():><: td() :>C
        <: td() :>curve to
	<: td() :>6
	<: td() :>A cubic Bezier
    <:TR():><: td() :>R
        <: td() :>quadratic curve to
	<: td() :>4
	<: td() :>A cubic Bezier
</table>

</blockquote>


<: subsection("Text annotations") :>
<blockquote>
Text is drawn by adding the letter "T" in front of a line. The "T" may have a number 1-9 appended describing the anchoring of the text. This numbers corresponds to their position on the numerical keyboard. The default alignment is 1, i.e. lower left. To write multiline text add string "\n".
<p>
The following example illustrates the various anchor options.
<: code_snippet("text-align.giv") :>
<p>

The following screenshot shows the various alignments relative to the
anchor points.
<center>
  <table>
    <tr><td><img src="text-align-screenshot.png">
    </tr>
  </table>
<center>
<p>
The encoding of giv files is always utf8. Bidi is supported through pango.
<p>
The backslash character is used as an escape character, so to get a literal backslash two slashes must be used. "\n" is used to indicate aline break.
</blockquote>

<: subsection("Colors") :>
<blockquote>
For all the properties that take colors as arguments the color may be given in several ways:
<ul>
<li>As a string name according to the <a href="http://en.wikipedia.org/wiki/X11_color_names">X11 color names</a>.
<li>As a hexstring in the format <tt>#rrggbb</tt>.
<li>It may have an optional slash followed by an alpha value between 0 and 1.
</ul>
Here are some valid color names:
<ul>
<li> <tt>green/0.5</tt>
<li> <tt>#ff0000</tt>
</ul>
</blockquote>

<: subsection("Styles") :>
<blockquote>
Instead of explicitly listing all properties for a dataset, this may be done inderectly by the creation of a style. A style is created and has properties added to it through the <tt>$def_style</tt> keyword. Each use of <tt>$def_style</tt> adds one property to the style. A style is then referenced in the beginning of a dataset with the <tt>$style</tt> keyword followed by the style name.
<: code_snippet("style-ex.giv") :>
</blockquote>

<: subsection("Giv file example") :>
<blockquote>
Here is an extensive giv file example showing off the various features of
giv. The result is shown in the screenshow below.

<: code_snippet("example.giv") :>
<br><br>
  <table>
    <tr><td><img src="marks-view-1.png">
	<td><img src="marks-view-2.png">
    </tr>
    <tr><td align=center>Marks at default zoom
	<td align=center>Marks zoomed in. The balloon popup has been turn on.
    </tr>
  </table>
	    
  <b>Note:</b> The example above contains just a few points. Giv very easily supports several hundred thousand points. The only limitations are the physical memory and the speed of the CPU.
</blockquote>

<: subsection("Balloons and paths") :>
One of the features of giv is that each dataset may have a tooltip popup attached to it. These popups are knows as "balloons". This allows adding auxilliary information to the display that is revealed only when the cursor hovers above the dataset.

In addition, a dataset may be given a hiearchical path. This path is referenced in the marks viewer, and may be used to toggle on and off datasets. If no balloon was explicitely set for a dataset, then the dataset name is used for the balloon.

Balloons are toggled by the "b" popup.

<: section("Interaction") :>
<blockquote>
<table>
    <: TR() :><th bgcolor=#eeeeff>Option
	<th bgcolor=#eeeeff>Description
  
<: TR() :><: td() :>1
	  <: td() :>Sets one image pixel equal to one screen pixel.
<: TR() :><: td() :>a
	  <: td() :>Toggle anti aliasing
<: TR() :><: td() :>b
	  <: td() :>Toggle the balloon popup.
<: TR() :><: td() :>c
	  <: td() :>Reduce contrast. Useful for viewing overlay on binary images.
<: TR() :><: td() :>i
	  <: td() :>Show information window
<: TR() :><: td() :>f
	  <: td() :>Fill data to window
<: TR() :><: td() :>g
	  <: td() :>Toggle the pixel grid. (Only shown at high zoom ratios).
<: TR() :><: td() :>h
	  <: td() :>Horizontal flip
<: TR() :><: td() :>m
	  <: td() :>Toggle overlay.
<: TR() :><: td() :>o
	  <: td() :>Popup dataset browser.
<: TR() :><: td() :>q
	  <: td() :>Quit
<: TR() :><: td() :>s
	  <: td() :>Shrink wrap
<: TR() :><: td() :>v
	  <: td() :>Vertical flip
<: TR() :><: td() :>Shift-V
	  <: td() :>Toggle vertical zoom locking.
<: TR() :><: td() :>Control+c
	  <: td() :>Copy contents of balloon text to clip board
<: TR() :><: td() :>Control+d
	  <: td() :>Copy contents of the last measurement to the clipboard.
<: TR() :><: td() :>Control+x
	  <: td() :>Copy XY coordinate to the to clip board
<: TR() :><: td() :>Esc
	  <: td() :>Abort remote command pick points
<: TR() :><: td() :>=<br>Ctrl-B1
	  <: td() :>Zoom in by a factor of 2
<: TR() :><: td() :>-<br>Ctrl-B3
	  <: td() :>Zoom out by a factor of 2
<: TR() :><: td() :>Scroll wheel up
	  <: td() :>Zoom in by a factor of 1.4
<: TR() :><: td() :>Scroll wheel down
	  <: td() :>Zoom out by a factor of 1.4
<: TR() :><: td() :>Shift+Scroll wheel up
	  <: td() :>Zoom in by a factor of 1.1
<: TR() :><: td() :>Shift+Scroll wheel down
	  <: td() :>Zoom out by a factor of 1.1
<: TR() :><: td() :>Control+Scroll wheel up
	  <: td() :>Zoom in by a factor of 2
<: TR() :><: td() :>Control+Scroll wheel down
	  <: td() :>Zoom out by a factor of 2
<: TR() :><: td() :>Alt + Scroll wheel up
	  <: td() :>Zoom in of quiver vectors by a factor of 1.2
<: TR() :><: td() :>Alt + Scroll wheel down
	  <: td() :>Zoom out of quiver vectors by a factor of 1.2
<: TR() :><: td() :>B3
	  <: td() :>Popup options menu.
<!--
<: TR() :><: td() :>c
	  <: td() :>Toggle cross hair.
-->
<: TR() :><: td() :>Left/Space
	  <: td() :>Show next image in directory.
<: TR() :><: td() :>Right/BackSpace
	  <: td() :>Show previous image in directory.
<: TR() :><: td() :>Shift-Down
	  <: td() :>Choose next image when several $image references are given or next image for multi depth images.
<: TR() :><: td() :>Shift-Up
	  <: td() :>Choose previous $image image
</table>
</blockquote>

<: section("Gallery") :>
<blockquote>
  <table>
    <tr><td align=center><img src="gallery-europe.jpg">
	<td align=center><img src="gallery-europe-zoom.jpg">
    </tr>
    <tr><td align=center width=25%>A heavy dataset from the CIA world map data of Europe comprising more than 400,000 vector elements.<br><br>
	<td align=center width=25%>Zoom-in of Shetland and Orkney islands off the coast of Scotland.<br><br>
    </tr>
    <tr>
	<td align=center><img src="gallery-cat-contour.jpg">
        <td align=center><img src="gallery-cat-contour-sub-pixel.png">
    </tr>
    <tr> <td align=center width=25%>The result of a contour finding algorithm
          shown on top of the image. The overlay may be toggled by
          the key 'm'.<br><br>
	<td align=center width=25%>Zoom in of image shows contour
          sub pixel accuracy.<br><br>
    </tr>
    <tr><td align=center><img src="gallery-quiver.jpg">
        <td align=center><img src="gallery-voronoi.png">
    </tr>
    <tr><td align=center valign=top>A quiver plot.
         <td align=center width=25%>giv showing a Voronoi diagram.
           The dataset browser is also shown. <br><br>
    </tr>
    <tr><td align=center><img src="gallery-cat-pseudo-color.jpg">
        <td align=center><img src="alpha-example.jpg">
    </tr>
    <tr><td align=center valign=top>Pseudo color
         <td align=center width=25%>A gray level image with transparent overlay
    </tr>

    <tr><td align=center><img width="40%" src="svg-marks-example.png">
    </tr>
    <tr>
      <td align=center valign=top>Example use of <tt>svgmarks</tt> <br/>where the markers are read from an <br/>external svg file.
    </tr>

    <!----->
    <tr>
      <td colspan="2" align="center"><img src="giv-m51-with-contrast-tool-screenshot.png" width=600></td>
    </tr>
    <tr>
    <td colspan="2" align="center">The Contrast Tool with a 16-bit image<br/>&nbsp;</td>
    </tr>

    <!----->

    <tr>
      <td align="center"><img src="pregnant-bitch-nomanip.png" width=350></td>
      <td align="center"><img src="pregnant-bitch.png" width=350></td>
    </tr>
    <tr>
      <td align="center">Dicom XRay image of a<br/>pregnant bitch<br/>&nbsp;</td>
      <td align="center">After contrast stretching and coloring<br/>&nbsp;</td>
    </tr>

    <!----->
    <tr>
      <td colspan="2" align="center"><img src="giv-calib-and-measure.png" width=600></td>
    </tr>
    <tr>
    <td colspan="2" align="center">The measurement caliper and the calibration tool<br></td>
    </tr>
  </table>
</blockquote>

<: section("Plugins") :>
Giv supports plugins for loading 8-bit, 16-bit, 32-bit and floating point images. Currently there are
loaders for the following formats:
<ul>
<li>Dicom
<li>FITS
<li>Tiff
<li>npy (Numerical python)
<li>png
<li>webp
</ul>

<: section("Remote access protocol") :>
giv can be remote controlled through json-rpc commands. The parameters of the commands are always given in an array.

<ul>
<li>load_file FILENAME - Load a file into giv.
<li>giv_string GIVSTRING - Change the giv annotation.
<li>pick_coordinate - Giv will change its cursor and wait for the user to click on a coordinate. The coordinate is returned.
</ul>

Here is an example in python calling the <b>pick_coordinate</b> command:

<: code_snippet("pick-coordinate.py", "pick-coordinate.py") :>

<p>
giv also contains an embedded JSONRPC client that come in two forms, the simplified and the full forms.
<p>
The simplified form splits the arguments on whitespace and takes the first argument as the name of the remote method and the rest as the parameters.
<pre>
  giv --remote "load_file /home/dov/pictures/maja.pgm"
</pre>
The full forms allows specifying the parameters in json syntax. The following command is equivalent to the above code:
<pre>
  ./giv --json_method load_file -json_params '["/home/dov/github/giv/examples/lena.pgm"]'
</pre>
<p>
For windows there is a command line tool called <tt>giv-remote-client.exe</tt> that provides a simple remote client:
<pre>
giv-remote-client.exe load_file "c:/Program Files/Giv/examples/lena.pgm"
</pre>

<: section("Future plans/Todo") :>
<blockquote>
  Here is a list of possible future development. The direction taken
  depends on user feedback!
  <UL>
    <LI> Create loaders for HDF5. </LI>
    <LI> Create a property window to show meta data. E.g. data from a dicom file. </LI>
    <LI> Speed up dealing with huge datasets. </LI>
    <LI> Create a measuring tool for measuring areas, histograms, etc. </LI>
    <li> Create a man page</li>
  </UL>  
</blockquote>
